pipeline {
  /*  agent {
        docker {
            image 'maven:3-openjdk-11'
            args '-v $HOME/.m2:/root/.m2'
        }
    } */

    parameters {
        booleanParam(name: 'bump_version', defaultValue: true, description: 'Сменить версию (номер версии спросим позже)')
        booleanParam(name: 'with_migrations', defaultValue: false, description: 'Собрать с миграциямм')
    }

    stages {

        stage('Prepare') {

                steps {

                   //  script {
                        // currentBuild.displayName = params.upstream_branch + " " + params.upstream_build_no;
                        // currentBuild.description = "Деплой для билда armonline/" +  params.upstream_branch  + '#' + params.upstream_build_no;
                    // }

                    // Кладем логин jenkins-юзера в переменную окружения USER_ID, для будущих проверок
                    wrap([$class: 'BuildUser']) {
                        script {
                            env.USER_ID = "${BUILD_USER_ID}"
                        }
                    }
                }

        }

        stage('Set version') {
            when {
                expression { params.bump_version == true }
            }
            steps {

                script {
                    SUGGEST_VERSION = sh (
                        script: 'jenkins/scripts/bump-version.py --current-version=`mvn help:evaluate -Dexpression=project.version -q -DforceStdout` --prefixes=MYAPP- --suffixes="-SNAPSHOT"',
                        returnStdout: true
                    ).trim()

                    RELEASE_MESSAGE = sh (
                        script: 'git log --oneline $(git describe --tags --abbrev=0 @^)..@',
                        returnStdout: true
                    )
                }

                milestone 1

                script {
                   message = 'Deploy branch ' + params.upstream_branch;
                   build_params = input message: message, parameters:[
                        string(name: 'SetVersion', defaultValue: SUGGEST_VERSION, description: 'Установить эту версию'),
                        text(name: 'Message', defaultValue: RELEASE_MESSAGE, description: 'Комментарий к релизу'),
                   ];

                   // echo "TARGET_BRANCH=$TARGET_BRANCH";

                   NEXT_JAVA_VERSION = build_params.SetVersion;
                   NEXT_GITHUB_TAG = build_params.SetVersion;

                   sh 'mvn versions:set -DnewVersion=' + NEXT_JAVA_VERSION;

                   sh("git config user.email jeknins@sv-jk01.invitro.ru")
                   sh("git config user.name 'jeknins@sv-jk01.invitro.ru'")
                   sh("git config --list")
                   sh("git tag -f " + NEXT_GITHUB_TAG + " -m '" + build_params.Message + "'")
                   sh("git add pom.xml")
                   sh("git commit -m 'release " + NEXT_JAVA_VERSION + "'")

                   sshagent(['simple-java-maven-app-github-key']) {
                       sh("""
                           #!/usr/bin/env bash
                           set +x
                           export GIT_SSH_COMMAND="ssh -oStrictHostKeyChecking=no"
                           git push origin \$NEXT_GITHUB_TAG --tags
                        """)
                   }

                }



            }
        }

        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage('Deliver') {
            steps {
                sh './jenkins/scripts/deliver.sh'
            }
        }
    }
}
